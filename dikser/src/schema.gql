# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Badge {
  id: String!
  label: String!
  description: String
  variant: String!
  color: String
  background: String
  border: String
  owners: [User!]
}

type Relationship {
  id: String!
  type: String
  description: String
  created_at: DateTime
  updated_at: DateTime
  partnership: [User!]
  posts: [Post!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Attachments {
  id: String!
  type: String!
  uri: [String!]!
}

type Post {
  id: String!
  caption: String!
  type: String
  upvoter: [User!]
  downvoter: [User!]
  created_at: DateTime
  updated_at: DateTime
  author: User!
  attachments: Attachments
  relationship: Relationship
  comments: [Comment!]
}

type Comment {
  id: String!
  text: String!
  created_at: DateTime
  updated_at: DateTime
  author: User!
  post: Post!
}

type Notification {
  id: String!
  type: String!
  read: Boolean
  authorId: String!
  relatedPostId: String
  created_at: DateTime
  updated_at: DateTime
  relatedUser: User!
}

type User {
  id: String!
  fullname: String
  username: String!
  email: String!
  bio: String
  verified: Boolean!
  avatar_url: String
  created_at: DateTime
  updated_at: DateTime
  contents: [Post!]
  comments: [Comment!]
  upvotes: [Post!]
  downvotes: [Post!]
  viewed: [Post!]
  relationship: Relationship
  badges: [Badge!]
  notifications: [Notification!]
}

type UserAttachment {
  publics: Int!
  folls: Int!
  upvotes: Int!
  relationship: Boolean!
}

type DeleteBadgeResponse {
  previous_data: Badge!
  status: String!
  code: Float!
}

type DeleteRelationshipResponse {
  previous_data: Relationship!
  status: String!
  code: Float!
}

type DeletePostResponse {
  previous_data: Post!
  status: String!
  code: Float!
}

type UpvoteDTO {
  postId: String!
  upvotes: Int!
  upvoters: [User!]!
}

type DownvoteDTO {
  postId: String!
  downvotes: Int!
  downvoters: [User!]!
}

type NotificationsDTO {
  userId: String!
  notifications: [Notification!]!
  unread: Int!
  read: Int!
}

type CommentsDTO {
  postId: String!
  comment: Comment!
  type: String!
  commentsSum: Int
}

type SearchOptions {
  id: String
  title: String
  type: String
  avatarUrl: String
  author: String
}

type Query {
  users: [User!]!
  user(username: String!): User!
  getUserById(id: String!): User!
  getMyProfile: User!
  searchUserRelevance(input: String!): [User!]!
  getUserAttachment(username: String!): UserAttachment!
  badges: [Badge!]!
  badge(label: String!): Badge!
  posts: [Post!]!
  post(postId: String!): Post!
  postByAuthorAndId(username: String!, postId: String!): Post!
  searchPostRelevance(input: String!): [Post!]!
  getPostComments(postId: String!): [Comment!]!
  getMyRelationship: Relationship!
  notifications: NotificationsDTO!
  searchContent(input: String!): [SearchOptions!]!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  specialUpdateUser(updateUserInput: UpdateUserInput!, id: String!): User!
  createBadge(createBadgeInput: CreateBadgeInput!): Badge!
  addUserABadge(addUserABadgeInput: AddUserABadgeInput!): User!
  removeBadge(label: String!): DeleteBadgeResponse!
  removeBadgeFromUser(userId: String!, label: String!): User!
  createPost(createAttachmentInput: CreateAttachmentInput, createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(postId: String!): DeletePostResponse!
  addUpvote(postId: String!): Int!
  removeUpvote(postId: String!): Int!
  addDownvote(postId: String!): Int!
  removeDownvote(postId: String!): Int!
  createRelationship(createRelationshipInput: CreateRelationshipInput!): Relationship!
  deleteRelationship: DeleteRelationshipResponse!
  readNotifications: Int!
  createComment(createCommentInput: CreateCommentInput!): Int!
  deleteComment(commentId: String!): Int!
}

input UpdateUserInput {
  username: String
  email: String
  bio: String
  avatar_url: String
}

input CreateBadgeInput {
  label: String!
  variant: String
  color: String
  background: String
  border: String
}

input AddUserABadgeInput {
  userId: String!
  badgeLabel: String!
}

input CreateAttachmentInput {
  type: String!
  uri: [String!]!
}

input CreatePostInput {
  caption: String!
  type: String!
}

input UpdatePostInput {
  caption: String
  type: String
  id: String!
}

input CreateRelationshipInput {
  type: String!
  description: String!
  target: String!
}

input CreateCommentInput {
  text: String!
  postId: String!
}

type Subscription {
  upvoteSubscription(postId: String!): UpvoteDTO!
  downvoteSubscription(postId: String!): DownvoteDTO!
  notificationSubscription(userId: String!): NotificationsDTO!
  commentsSubscription(postId: String!): CommentsDTO!
}
