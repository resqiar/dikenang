import { useEffect, useState } from 'react'
import styled from 'styled-components'
import { UserProfileType } from '../../types/profile.type'
import FeedInputBox from '../feed/FeedInputBox'
import FeedPost from '../feed/FeedPost'
import Leftbar from '../sidebar/leftbar/Leftbar'
import Rightbar from '../sidebar/rightbar/Rightbar'
import { useGetPublicFeedsQuery } from '../../generated/graphql'
import FeedPostSkeleton from '../feed/FeedPostSkeleton'
import LoadingBrand from '../loading/LoadingBrand'
import dismissAlert from '../../utils/dismissAlert'

import Tabs from '@material-ui/core/Tabs'
import Tab from '@material-ui/core/Tab'
import { Alert, AlertTitle } from '@material-ui/lab'
import IconButton from '@material-ui/core/IconButton'
import Collapse from '@material-ui/core/Collapse'
import CloseIcon from '@material-ui/icons/Close'
import ContactSupportIcon from '@material-ui/icons/ContactSupport'
import { Chip } from '@material-ui/core'

interface Props {
	profile: UserProfileType
}
interface TabPanelProps {
	children?: React.ReactNode
	index: any
	value: any
}

/**
 * @param TabPanelProps
 * @renders Global tab or Partner Tab
 */
function TabPanel(props: TabPanelProps) {
	const { children, value, index, ...other } = props
	return (
		<div
			role="tabpanel"
			hidden={value !== index}
			id={`tab-${index}`}
			aria-labelledby={`tab-${index}`}
			{...other}
		>
			{children}
		</div>
	)
}

export default function IndexBody({ profile }: Props) {
	/**
	 * State for keeping record of
	 * Material UI Tabs and TabItems.
	 * Value will always be 0 or 1
	 * 0 represent public feeds, 1 represent private feeds
	 */
	const [value, setValue] = useState<number>(0)

	/**
	 * Lazily create state for
	 * opening or closing Tester Alert
	 */
	const [open, setOpen] = useState<boolean>(true)

	/**
	 * Handle tab values change
	 */
	const handleTabChange = (
		_event: React.ChangeEvent<{}>,
		newValue: number
	) => {
		setValue(newValue)
	}

	useEffect(() => {
		const isAlertDismissed = localStorage.getItem('alert:beta-test')
		if (isAlertDismissed === 'dismissed') {
			setOpen(false)
		} else {
			setOpen(true)
		}
	}, [])

	/**
	 * This is a provided hook generated by graphql-codegen.
	 * @usage to query all public feeds, it also provided
	 * helper function and result like { loading, data, error, refetch. etc }
	 * @see https://www.apollographql.com/docs/react/data/queries/#options
	 */
	const publicFeedsHooks = useGetPublicFeedsQuery()

	return (
		<IndexBodyWrapper>
			{/* Sidebar => Left */}
			<Leftbar profile={profile} />

			{/* Post Feed => Middle */}
			<IndexBodyMidWrapper>
				{/* Feed Input Box */}
				<FeedInputBox
					profile={profile}
					// When user succesfully upload post, refecth/refresh feeds
					onUploadCallback={() => publicFeedsHooks.refetch()}
				/>

				{/* TABS */}
				<TabsWrapper>
					<Tabs
						value={value}
						onChange={handleTabChange}
						indicatorColor="primary"
						textColor="inherit"
						centered
						variant="fullWidth"
					>
						<Tab
							label="Public Feeds"
							aria-label="Public Feeds"
							// when tab clicked, refecth/refresh feeds
							onClick={() => publicFeedsHooks.refetch()}
						/>
						<Tab label="Your Partner" aria-label="your partner" />
					</Tabs>
				</TabsWrapper>

				{/* Alert for greeting early tester */}
				<AlertWrapper isHidden={open}>
					<Collapse in={open}>
						<Alert
							severity="info"
							icon={<ContactSupportIcon />}
							style={{
								background: 'var(--background-dimmed-300)',
								color: 'var(--font-white)',
							}}
							action={
								<IconButton
									aria-label="close"
									style={{ color: 'var(--font-white-200)' }}
									size="small"
									onClick={() =>
										dismissAlert({
											setHook: setOpen,
										})
									}
								>
									<CloseIcon fontSize="inherit" />
								</IconButton>
							}
						>
							<AlertTitle>
								Hello dikenang users, welcome to the memorable
								community.
							</AlertTitle>
							Dikenang is currently in early development, some
							features may not work, this is the point where we
							need your help! please report any bug or your
							feedback to our GitHub Issues{' '}
							<a
								href="https://github.com/resqiar/dikenang/issues"
								target="_blank"
								style={{ textDecoration: 'underline' }}
							>
								here
							</a>
							. As a small reward for joining dikenang, we will
							compensate you this badge{' '}
							{
								<Chip
									label="Tester"
									variant="outlined"
									size="small"
									style={{
										color: 'var(--font-white-800)',
										borderColor: 'var(--font-white-800)',
									}}
								/>
							}{' '}
							that will be shown in feeds everytime you post
							something!
						</Alert>
					</Collapse>
				</AlertWrapper>

				<TabsPanelWrapper>
					<TabPanel value={value} index={0}>
						{/* When API calls is not ready, render Skeleton Component */}
						{publicFeedsHooks.loading ? (
							<>
								<FeedPostSkeleton />
								<FeedPostSkeleton />
								<FeedPostSkeleton />
							</>
						) : (
							[
								// When API calls is ready, map the result into FeedPost Component
								publicFeedsHooks.data?.posts.map((value) => (
									<FeedPost
										key={value.id}
										profile={profile}
										postId={value.id}
										caption={value.caption}
										type={value.type as string}
										authorId={value.author.id}
										fullname={
											value.author.fullname as string
										}
										username={value.author.username}
										badge={
											value.author.badges
												? value.author.badges[0]
												: undefined
										}
										timestamp={value.created_at}
										imageSrc={value.attachments?.uri}
										avatarSrc={
											value.author.avatar_url as
												| string
												| undefined
										}
										commentSum={0}
										onRefecthCallback={() =>
											publicFeedsHooks.refetch()
										}
									/>
								)),
							]
						)}
					</TabPanel>
					<TabPanel value={value} index={1}>
						{/* Feed Partner Post */}
						<h1
							style={{
								color: '#fff',
								display: 'flex',
								justifyContent: 'center',
							}}
						>
							<LoadingBrand height="400px" />
						</h1>
					</TabPanel>
				</TabsPanelWrapper>
			</IndexBodyMidWrapper>

			{/* Sidebar => Right */}
			<Rightbar />
		</IndexBodyWrapper>
	)
}

const IndexBodyWrapper = styled.div`
	display: flex;
	margin: 28px 5%;

	// how mobile should behave
	@media (max-width: 600px) {
		margin: 0px;
	}
`

const IndexBodyMidWrapper = styled.div`
	flex: 0.6;
	margin: 18px 8px;

	// how mobile should behave
	@media (max-width: 600px) {
		flex: 1;
		margin: 0;
	}
`
const TabsWrapper = styled.div`
	color: var(--font-white-800);
	margin-top: -12px;

	// how mobile should behave
	@media (max-width: 600px) {
		margin: 0px;
	}
`

const TabsPanelWrapper = styled.div`
	margin-top: 18px;

	// how mobile should behave
	@media (max-width: 600px) {
		margin-top: 8px;
	}
`

const AlertWrapper = styled.div<{ isHidden?: boolean }>`
	margin: 18px 0px;
	display: ${(props) => (!props.isHidden ? 'none' : undefined)};
`
